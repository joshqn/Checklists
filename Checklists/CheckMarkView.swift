//
// CheckMarkView.swift
// Generated by Core Animator version 1.2.4 on 11/1/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class CheckMarkView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 50, height: 52))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:50, height:52)
		__scaling__.center = CGPoint(x:25.4, y:26.1)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let checkMark = UIImageView()
		checkMark.bounds = CGRect(x:0, y:0, width:34.0, height:37.0)
		var imgCheckMark: UIImage!
		if let imagePath = bundle.pathForResource("checkMark.png", ofType:nil) {
			imgCheckMark = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'checkMark.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		checkMark.image = imgCheckMark
		checkMark.contentMode = .Center;
		checkMark.layer.position = CGPoint(x:25.551, y:25.623)
		__scaling__.addSubview(checkMark)
		viewsByName["checkMark"] = checkMark

		self.viewsByName = viewsByName
	}

	// - MARK: complete

	func addCompleteAnimation() {
		addCompleteAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCompleteAnimation(completion: ((Bool) -> Void)?) {
		addCompleteAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCompleteAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addCompleteAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCompleteAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCompleteAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCompleteAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticipateTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 1.00, 1.00)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.510
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Complete")
			self.animationCompletions[layer.animationForKey("Complete")!] = complete
		}

		let checkMarkOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		checkMarkOpacityAnimation.duration = 0.510
		checkMarkOpacityAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 1.000 as Float]
		checkMarkOpacityAnimation.keyTimes = [0.000 as Float, 0.039 as Float, 0.216 as Float, 1.000 as Float]
		checkMarkOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		checkMarkOpacityAnimation.beginTime = beginTime
		checkMarkOpacityAnimation.fillMode = fillMode
		checkMarkOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkOpacityAnimation, forKey:"complete_Opacity")

		let checkMarkScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		checkMarkScaleXAnimation.duration = 0.510
		checkMarkScaleXAnimation.values = [0.137 as Float, 1.500 as Float, 1.000 as Float]
		checkMarkScaleXAnimation.keyTimes = [0.000 as Float, 0.216 as Float, 1.000 as Float]
		checkMarkScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		checkMarkScaleXAnimation.beginTime = beginTime
		checkMarkScaleXAnimation.fillMode = fillMode
		checkMarkScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkScaleXAnimation, forKey:"complete_ScaleX")

		let checkMarkScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		checkMarkScaleYAnimation.duration = 0.510
		checkMarkScaleYAnimation.values = [0.137 as Float, 1.500 as Float, 1.000 as Float]
		checkMarkScaleYAnimation.keyTimes = [0.000 as Float, 0.216 as Float, 1.000 as Float]
		checkMarkScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		checkMarkScaleYAnimation.beginTime = beginTime
		checkMarkScaleYAnimation.fillMode = fillMode
		checkMarkScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkScaleYAnimation, forKey:"complete_ScaleY")

		let checkMarkTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		checkMarkTranslationXAnimation.duration = 0.510
		checkMarkTranslationXAnimation.values = [-0.000 as Float, -0.000 as Float, 0.000 as Float]
		checkMarkTranslationXAnimation.keyTimes = [0.000 as Float, 0.216 as Float, 1.000 as Float]
		checkMarkTranslationXAnimation.timingFunctions = [linearTiming, anticipateTiming]
		checkMarkTranslationXAnimation.beginTime = beginTime
		checkMarkTranslationXAnimation.fillMode = fillMode
		checkMarkTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkTranslationXAnimation, forKey:"complete_TranslationX")

		let checkMarkTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		checkMarkTranslationYAnimation.duration = 0.510
		checkMarkTranslationYAnimation.values = [0.000 as Float, -0.000 as Float, 0.000 as Float]
		checkMarkTranslationYAnimation.keyTimes = [0.000 as Float, 0.216 as Float, 1.000 as Float]
		checkMarkTranslationYAnimation.timingFunctions = [linearTiming, anticipateTiming]
		checkMarkTranslationYAnimation.beginTime = beginTime
		checkMarkTranslationYAnimation.fillMode = fillMode
		checkMarkTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkTranslationYAnimation, forKey:"complete_TranslationY")
	}

	func removeCompleteAnimation() {
		self.layer.removeAnimationForKey("Complete")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("complete_Opacity")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("complete_ScaleX")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("complete_ScaleY")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("complete_TranslationX")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("complete_TranslationY")
	}

	// - MARK: uncomplete

	func addUncompleteAnimation() {
		addUncompleteAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addUncompleteAnimation(completion: ((Bool) -> Void)?) {
		addUncompleteAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addUncompleteAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addUncompleteAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addUncompleteAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addUncompleteAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addUncompleteAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.510
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Uncomplete")
			self.animationCompletions[layer.animationForKey("Uncomplete")!] = complete
		}

		let checkMarkOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		checkMarkOpacityAnimation.duration = 0.510
		checkMarkOpacityAnimation.values = [1.000 as Float, 1.000 as Float, 0.000 as Float, 0.000 as Float]
		checkMarkOpacityAnimation.keyTimes = [0.000 as Float, 0.784 as Float, 0.961 as Float, 1.000 as Float]
		checkMarkOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		checkMarkOpacityAnimation.beginTime = beginTime
		checkMarkOpacityAnimation.fillMode = fillMode
		checkMarkOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkOpacityAnimation, forKey:"uncomplete_Opacity")

		let checkMarkScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		checkMarkScaleXAnimation.duration = 0.510
		checkMarkScaleXAnimation.values = [1.000 as Float, 1.500 as Float, 0.137 as Float]
		checkMarkScaleXAnimation.keyTimes = [0.000 as Float, 0.784 as Float, 1.000 as Float]
		checkMarkScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		checkMarkScaleXAnimation.beginTime = beginTime
		checkMarkScaleXAnimation.fillMode = fillMode
		checkMarkScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkScaleXAnimation, forKey:"uncomplete_ScaleX")

		let checkMarkScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		checkMarkScaleYAnimation.duration = 0.510
		checkMarkScaleYAnimation.values = [1.000 as Float, 1.500 as Float, 0.137 as Float]
		checkMarkScaleYAnimation.keyTimes = [0.000 as Float, 0.784 as Float, 1.000 as Float]
		checkMarkScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		checkMarkScaleYAnimation.beginTime = beginTime
		checkMarkScaleYAnimation.fillMode = fillMode
		checkMarkScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkScaleYAnimation, forKey:"uncomplete_ScaleY")

		let checkMarkTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		checkMarkTranslationXAnimation.duration = 0.510
		checkMarkTranslationXAnimation.values = [0.000 as Float, -0.000 as Float, -0.000 as Float]
		checkMarkTranslationXAnimation.keyTimes = [0.000 as Float, 0.784 as Float, 1.000 as Float]
		checkMarkTranslationXAnimation.timingFunctions = [overshootTiming, linearTiming]
		checkMarkTranslationXAnimation.beginTime = beginTime
		checkMarkTranslationXAnimation.fillMode = fillMode
		checkMarkTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkTranslationXAnimation, forKey:"uncomplete_TranslationX")

		let checkMarkTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		checkMarkTranslationYAnimation.duration = 0.510
		checkMarkTranslationYAnimation.values = [0.000 as Float, -0.000 as Float, 0.000 as Float]
		checkMarkTranslationYAnimation.keyTimes = [0.000 as Float, 0.784 as Float, 1.000 as Float]
		checkMarkTranslationYAnimation.timingFunctions = [overshootTiming, linearTiming]
		checkMarkTranslationYAnimation.beginTime = beginTime
		checkMarkTranslationYAnimation.fillMode = fillMode
		checkMarkTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["checkMark"]?.layer.addAnimation(checkMarkTranslationYAnimation, forKey:"uncomplete_TranslationY")
	}

	func removeUncompleteAnimation() {
		self.layer.removeAnimationForKey("Uncomplete")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("uncomplete_Opacity")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("uncomplete_ScaleX")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("uncomplete_ScaleY")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("uncomplete_TranslationX")
		self.viewsByName["checkMark"]?.layer.removeAnimationForKey("uncomplete_TranslationY")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Complete")
		self.layer.removeAnimationForKey("Uncomplete")
	}
}